import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI
import 'login.dart';

class registerPage extends StatefulWidget {
  const registerPage({super.key});

  @override
  State<registerPage> createState() => _registerPageState();
}

class _registerPageState extends State<registerPage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();
  final _ageController = TextEditingController();
  final _addressController = TextEditingController();

  String _gender = 'Male';
  String _district = 'Chennai';

  final List<String> districts = [
    'Chennai', 'Coimbatore', 'Madurai', 'Tiruchirappalli', 'Salem',
    'Tirunelveli', 'Vellore', 'Erode', 'Thoothukudi', 'Thanjavur',
    'Dindigul', 'Cuddalore', 'Kanchipuram', 'Kanyakumari', 'Namakkal',
    'Sivaganga', 'Dharmapuri', 'Nagapattinam', 'Villupuram', 'Virudhunagar',
    'Ramanathapuram', 'Pudhukottai', 'Tiruppur'
  ];

  bool _isLoading = false;
  String _error = "";

  /// Initialize Firebase before use
  Future<void> initializeFirebase() async {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  }

  /// Register new user
  Future<void> _register() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
      _error = "";
    });

    try {
      // Create user in Firebase Authentication
      UserCredential userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
      );

      String uid = userCredential.user!.uid;

      // Save user details in Firestore
      await FirebaseFirestore.instance.collection('users').doc(uid).set({
        'uid': uid,
        'email': _emailController.text.trim(),
        'name': _nameController.text.trim(),
        'age': _ageController.text.trim(),
        'gender': _gender,
        'address': _addressController.text.trim(),
        'district': _district,
        'photoUrl': "", // Empty initially, will update in profile page
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Registration successful")),
      );

      // Navigate to login page
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const login()),
      );
    } on FirebaseAuthException catch (e) {
      setState(() => _error = e.message ?? "Registration failed.");
      debugPrint("Auth error: ${e.message}");
    } on FirebaseException catch (e) {
      setState(() => _error = e.message ?? "Firestore error.");
      debugPrint("Firestore error: ${e.message}");
    } catch (e) {
      setState(() => _error = e.toString());
      debugPrint("Unknown error: $e");
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _nameController.dispose();
    _ageController.dispose();
    _addressController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset("images/loginback.jpg", fit: BoxFit.cover),
          Center(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(20),
              child: Card(
                color: Colors.white.withOpacity(0.9),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15)),
                elevation: 10,
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Form(
                    key: _formKey,
                    child: Column(mainAxisSize: MainAxisSize.min, children: [
                      const Text("Register",
                          style: TextStyle(
                              fontSize: 24, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 10),

                      // Name
                      TextFormField(
                        controller: _nameController,
                        decoration: const InputDecoration(labelText: "Name"),
                        validator: (value) =>
                            value!.isEmpty ? "Enter name" : null,
                      ),

                      // Age
                      TextFormField(
                        controller: _ageController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(labelText: "Age"),
                        validator: (value) =>
                            value!.isEmpty ? "Enter age" : null,
                      ),

                      // Gender
                      DropdownButtonFormField<String>(
                        value: _gender,
                        items: ['Male', 'Female', 'Other']
                            .map((g) =>
                                DropdownMenuItem(value: g, child: Text(g)))
                            .toList(),
                        onChanged: (value) => setState(() => _gender = value!),
                        decoration: const InputDecoration(labelText: "Gender"),
                      ),

                      // Address
                      TextFormField(
                        controller: _addressController,
                        decoration: const InputDecoration(labelText: "Address"),
                        validator: (value) =>
                            value!.isEmpty ? "Enter address" : null,
                      ),

                      // District
                      DropdownButtonFormField<String>(
                        value: _district,
                        items: districts
                            .map((d) =>
                                DropdownMenuItem(value: d, child: Text(d)))
                            .toList(),
                        onChanged: (value) =>
                            setState(() => _district = value!),
                        decoration:
                            const InputDecoration(labelText: "District"),
                      ),

                      // Email
                      TextFormField(
                        controller: _emailController,
                        decoration: const InputDecoration(labelText: "Email"),
                        validator: (value) => value!.isEmpty ||
                                !value.contains("@")
                            ? "Enter valid email"
                            : null,
                      ),

                      // Password
                      TextFormField(
                        controller: _passwordController,
                        obscureText: true,
                        decoration:
                            const InputDecoration(labelText: "Password"),
                        validator: (value) => value!.length < 6
                            ? "Minimum 6 characters"
                            : null,
                      ),

                      if (_error.isNotEmpty) ...[
                        const SizedBox(height: 10),
                        Text(_error,
                            style: const TextStyle(color: Colors.red)),
                      ],

                      const SizedBox(height: 20),

                      _isLoading
                          ? const CircularProgressIndicator()
                          : ElevatedButton(
                              onPressed: _register,
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.deepOrange,
                                padding:
                                    const EdgeInsets.symmetric(vertical: 14),
                                shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10)),
                              ),
                              child: const Text(
                                "Register",
                                style: TextStyle(fontSize: 16),
                              ),
                            ),
                    ]),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
